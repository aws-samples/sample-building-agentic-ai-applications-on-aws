Conditions:
  IsWS: !Equals 
    - !Ref IsWorkshopStudioEnv
    - "yes"
  # IfCreateIDC: !Equals 
  #   - !Ref CreateIDC
  #   - "yes"
  # IfCreateQApp: !Equals 
  #   - !Ref CreateQApp
  #   - "yes"

Resources:
  # IDCLambdaExecutionRole:
  #   Type: AWS::IAM::Role
  #   Condition: IfCreateIDC
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     Policies:
  #       - PolicyName: SSOAdminPolicy
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - sso:CreateInstance
  #                 - sso:DescribeInstance
  #                 - sso:ListInstances
  #                 - iam:CreateServiceLinkedRole
  #                 - identitystore:CreateGroup
  #                 - identitystore:CreateGroupMembership
  #                 - identitystore:CreateUser
  #               Resource:
  #                 - '*'

  # IDCLambda:
  #   Type: AWS::Lambda::Function
  #   Condition: IfCreateIDC
  #   Properties:
  #     Handler: index.handler
  #     Runtime: python3.10
  #     Timeout: 300
  #     Description: Create IDC Local Instance
  #     Role: !GetAtt IDCLambdaExecutionRole.Arn
  #     Code:
  #       ZipFile: |
  #         import json
  #         import time
  #         import boto3
  #         import cfnresponse

  #         sso_client = boto3.client('sso-admin')
  #         id_store_client = boto3.client('identitystore')

  #         GROUPS = ["ML_SME_SA", "SA", "DB_SME_SA", "Admins", "AllUsers"]
  #         USERS = [
  #             {
  #                 "user_name": "martha_rivera",
  #                 "email": "martha_rivera@example.com",
  #                 "display_name": "Martha Rivera",
  #                 "given_name": "Martha",
  #                 "last_name": "Rivera",
  #                 "groups": ["Admins", "AllUsers"]  
  #             },
  #             {
  #                 "user_name": "pat_candella",
  #                 "email": "pat_candella@example.com",
  #                 "display_name": "Pat Candella",
  #                 "given_name": "Pat",
  #                 "last_name": "Candella",
  #                 "groups": ["SA", "AllUsers"]  
  #             },
  #             {
  #                 "user_name": "mateo_jackson",
  #                 "email": "mateo_jackson@example.com",
  #                 "display_name": "Mateo Jackson",
  #                 "given_name": "Mateo",
  #                 "last_name": "Jackson",
  #                 "groups": ["DB_SME_SA", "AllUsers"]  
  #             },
  #             {
  #                 "user_name": "john_doe",
  #                 "email": "john_doe@example.com",
  #                 "display_name": "John Doe",
  #                 "given_name": "John",
  #                 "last_name": "Doe",
  #                 "groups": ["ML_SME_SA", "AllUsers"]  
  #             },
  #             {
  #                 "user_name": "mary_major",
  #                 "email": "mary_major@example.com",
  #                 "display_name": "Mary Major",
  #                 "given_name": "Mary",
  #                 "last_name": "Major",
  #                 "groups": ["AllUsers"]  
  #             }
  #         ]

  #         def handler(event, context):
  #             try:
  #                 print('Received event: ' + json.dumps(event, indent=4, default=str))
  #                 if event['RequestType'] == 'Create':
  #                     print("Check for existing IDC Instance")
  #                     list_inst_response = sso_client.list_instances()
  #                     if list_inst_response["Instances"]:
  #                         print("IDC Instance exists. Skipping creation")
  #                         instance_arn = list_inst_response["Instances"][0]['InstanceArn']
  #                         cfnresponse.send(event, context, cfnresponse.SUCCESS, {'InstanceArn': instance_arn}, instance_arn)
  #                         return
  #                     print("Creating IDC Instance")
  #                     create_response = sso_client.create_instance()
  #                     instance_arn = create_response['InstanceArn']
  #                     identity_store_id = None
  #                     for idx in range(10):
  #                         instance_dsec = sso_client.describe_instance(InstanceArn=instance_arn)
  #                         print("IDC Instance:" + json.dumps(instance_dsec, indent=4, default=str))
  #                         if instance_dsec['Status'] != "ACTIVE":
  #                             time.sleep(10)
  #                         else:
  #                             identity_store_id = instance_dsec['IdentityStoreId']
  #                             break
  #                     if identity_store_id:
  #                         group_idx = {}
  #                         for group in GROUPS:
  #                             resp = id_store_client.create_group(
  #                                 IdentityStoreId=identity_store_id,
  #                                 DisplayName=group,
  #                                 Description=group
  #                             )
  #                             print("Group Creation:" + json.dumps(resp, indent=4, default=str))
  #                             group_idx[group] = resp["GroupId"]
  #                         for user in USERS:
  #                             user_resp = id_store_client.create_user(
  #                                 IdentityStoreId=identity_store_id,
  #                                 UserName=user["user_name"],
  #                                 DisplayName=user["display_name"],
  #                                 Emails=[{"Value": user["email"], "Type": "Work", "Primary": True}],
  #                                 Name={"GivenName": user["given_name"], "FamilyName": user["last_name"]}
  #                             )
  #                             print("User Creation:" + json.dumps(user_resp, indent=4, default=str))
  #                             # Assign groups
  #                             for grp in user["groups"]:
  #                                 if grp in group_idx:
  #                                     member_resp = id_store_client.create_group_membership(
  #                                         IdentityStoreId=identity_store_id,
  #                                         GroupId=group_idx[grp],
  #                                         MemberId={"UserId": user_resp["UserId"]}
  #                                     )
  #                                     print("Group Member Creation:" + json.dumps(member_resp, indent=4, default=str))
  #                         cfnresponse.send(event, context, cfnresponse.SUCCESS, {'InstanceArn': instance_arn}, instance_arn)
  #                 # elif event['RequestType'] == 'Delete':
  #                 #     sso_client.delete_instance(InstanceArn=event['PhysicalResourceId'])
  #                 #     cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['PhysicalResourceId'])
  #                 else:
  #                     cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
  #                 print("done")
  #             except Exception as e:
  #                 print(e)
  #                 cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # IDCInstance:
  #   Type: AWS::CloudFormation::CustomResource
  #   Condition: IfCreateIDC
  #   Properties:
  #     ServiceToken: !GetAtt IDCLambda.Arn

  S3CopyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: IsWS
    Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        Path: "/"
  
  S3CopyLambda:
    Type: AWS::Lambda::Function
    Condition: IsWS
    Properties:
      Description: Lambda Function with code to copy sample data to S3 bucket
      Handler: "index.lambda_handler"
      Runtime: python3.9
      Timeout: 300
      Role: !GetAtt S3CopyLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          import os
          from botocore.exceptions import ClientError

          # Initial setup
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  if o == 'EQ/whitepapers_acl.json':
                    key = prefix + o
                    buffer = s3.get_object(Bucket=source_bucket, Key=key)
                    content = buffer['Body'].read().decode("utf-8");
                    new_content = content.replace("NAME-OF-DATASOURCE-S3-BUCKET", dest_bucket)
                    s3.put_object(Bucket=dest_bucket, Key=o, Body=new_content)
                    print('Update and copy ACL file = %s' % key)
                  else:
                    key = prefix + o
                    copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                    }
                    print('copy_source: %s' % copy_source)
                    print('dest_bucket = %s'%dest_bucket)
                    print('key = %s' %o)
                    s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                      Key=o)

          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)

          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)

          def lambda_handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                      / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  S3CopyCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Condition: IsWS
    Properties:
      ServiceToken: !GetAtt S3CopyLambda.Arn
      SourceBucket: !Ref AssetBucketName
      DestBucket: !Ref S3Bucket
      Prefix: !Ref AssetBucketPrefix
      Objects:
        - EQ/whitepapers_acl.json

  
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
          BlockPublicAcls: Yes
          BlockPublicPolicy: Yes
          IgnorePublicAcls: Yes
          RestrictPublicBuckets: Yes

  # AWSServiceRoleForQBusiness:
  #   Type: AWS::IAM::ServiceLinkedRole
  #   Properties:
  #     AWSServiceName: qbusiness.amazonaws.com
  #     Description: Grants permissions to AWS Services and Resources used or managed by Amazon Q.

  # QBusinessApp:
  #   Type: AWS::QBusiness::Application
  #   Condition: IfCreateQApp
  #   Properties:
  #     DisplayName: workshop-app-01
  #     Description: qbusiness demo app
  #     IdentityCenterInstanceArn: !GetAtt IDCInstance.InstanceArn
  #     RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/qbusiness.amazonaws.com/AWSServiceRoleForQBusiness
  #   DependsOn:
  #     - IDCInstance

Parameters:
  AssetBucketName:
    Type: String
    Default: "Not-needed-for-self-paced-lab-in-customer-account"
    Description: Name of the event asset bucket. For self paced labs in customer account, please leave the default value as is.
  AssetBucketPrefix:
    Type: String
    Default: "Not-needed-for-self-paced-lab-in-customer-account"
    Description: Prefix for the asset bucket. For self paced labs in customer account, please leave the default value as is.
  IsWorkshopStudioEnv:
    Type: String
    Default: "no"
    AllowedValues:
      - "no"
      - "yes"
    Description: Whether this stack is being deployed in a Workshop Studio environment or not. If not sure, leave as default of "no".
  CreateIDC:
    Type: String
    Default: "no"
    AllowedValues:
      - "no"
      - "yes"
    Description: Whether this stack should create AWS IAM Identity Center instance and setup users/groups. Answer "Yes" only if the AWS account does not have IDC enabled and is allow listed to enable the same. If not sure, leave as default of "no".
  CreateQApp:
    Type: String
    Default: "no"
    AllowedValues:
      - "no"
      - "yes"
    Description: Whether this stack should create samples Amazon Q Business Application. If not sure, leave as default of "no".

Outputs:
  S3BucketUrl:
    Description: Your S3 bucket to be used as a data source
    Value: 
      Fn::Join:
        - ""
        - - "https://console.aws.amazon.com/s3/home?bucket="
          - !Ref S3Bucket
  # IDCInstanceArn:
  #   Condition: IfCreateIDC
  #   Description: AWS IAM Identity Center instance Arn
  #   Value: !GetAtt IDCInstance.InstanceArn